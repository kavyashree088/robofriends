{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/Robots.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","cardComponent","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","username","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","console","log","length","filteredRobots","filter","toLocaleLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a773ed04.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = (props) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 \">\n      <img src={`https://robohash.org/${props.id}?200x200`} alt=\"robo\" />\n      <div>\n        <h2>{props.name}</h2>\n        <p>{props.email}</p>\n      </div>\n    </div>\n  );\n};\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  const cardComponent = robots.map((user, i) => {\n    return (\n      <Card key={i} id={user.id} name={user.name} email={user.email}></Card>\n    );\n  });\n  return <div className=\"\">{cardComponent}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search Robots\"\n        onChange={searchChange}\n      ></input>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"500px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","export const robots = [\n  {\n    id: 1,\n    name: \"Leanne Graham\",\n    username: \"Bret\",\n    email: \"Sincere@april.biz\",\n  },\n  {\n    id: 2,\n    name: \"Ervin Howell\",\n    username: \"Antonette\",\n    email: \"Shanna@melissa.tv\",\n  },\n  {\n    id: 3,\n    name: \"Clementine Bauch\",\n    username: \"Samantha\",\n    email: \"Nathan@yesenia.net\",\n  },\n  {\n    id: 4,\n    name: \"Patricia Lebsack\",\n    username: \"Karianne\",\n    email: \"Julianne.OConner@kory.org\",\n  },\n  {\n    id: 5,\n    name: \"Chelsey Dietrich\",\n    username: \"Kamren\",\n    email: \"Lucio_Hettinger@annie.ca\",\n  },\n  {\n    id: 6,\n    name: \"Mrs. Dennis Schulist\",\n    username: \"Leopoldo_Corkery\",\n    email: \"Karley_Dach@jasper.info\",\n  },\n  {\n    id: 7,\n    name: \"Kurtis Weissnat\",\n    username: \"Elwyn.Skiles\",\n    email: \"Telly.Hoeger@billy.biz\",\n  },\n  {\n    id: 8,\n    name: \"Nicholas Runolfsdottir V\",\n    username: \"Maxime_Nienow\",\n    email: \"Sherwood@rosamond.me\",\n  },\n  {\n    id: 9,\n    name: \"Glenna Reichert\",\n    username: \"Delphine\",\n    email: \"Chaim_McDermott@dana.io\",\n  },\n  {\n    id: 10,\n    name: \"Clementina DuBuque\",\n    username: \"Moriah.Stanton\",\n    email: \"Rey.Padberg@karina.biz\",\n  },\n];\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1> Ooops. That is some err</h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport \"./App.css\";\nimport Scroll from \"../components/Scroll\";\nimport { robots } from \"./Robots\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/todos/\")\n      .then((response) => {\n        response.json();\n      })\n      .then((json) => {\n        console.log(json);\n        this.setState({\n          robots: robots,\n        });\n      });\n  }\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  };\n  render() {\n    console.log(this.state.robots.length);\n    if (this.state.robots.length === 0) {\n      return <h1>Loading</h1>;\n    } else {\n      const filteredRobots = this.state.robots.filter((robots) => {\n        return robots.name\n          .toLocaleLowerCase()\n          .includes(this.state.searchfield.toLocaleLowerCase());\n      });\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f1\">Robo Friends</h1>\n          <SearchBox searchChange={this.onSearchChange}></SearchBox>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots}></CardList>\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}